notifications:
  email: false
os: linux
language: python

python:
  - 3.8
  - 3.7
  - 3.6

sudo: required
services: docker

env:
  jobs:
    - DOCKER_IMAGE=manylinux1_x86_64
    - DOCKER_IMAGE=manylinux1_i686 PRE_CMD=linux32
    - DOCKER_IMAGE=manylinux2010_x86_64
  global:
    - secure: "tqT86gkgvMPSuN5abveSFGdEy/UM5tI7VFrC2ez3PBeDltMX+KRT4VWgr4SxyGnW1AeGvHk745Vz97fx7N8ygkiahBnfPvZgOX/Y4gj5QrxVU2Bky89e1EMufX7q2R/ghLFvLj9+tfWccTxdcprQhuYEdd0dPy/VDkJWc1HDpoUZIMdorZc/av5RyPWdcuCFTFX7uSmBJDE47W5RoWzKRi6UPHDkGu1FB54fuqn1aeMsE2AynizyEN7rOyn7E0L66XILilhBj9I+NxTZ+Rs8gKdpYbD38SqBUhp3YZ7lyziS0lrzDWEsJoo7Av963KdlFoP9iCzmJjQ0xBP1jfbTOAcx731+MY+hhVCxBJTI48RqyWGypu3eadam0I/12l7IEQVRQFBOKgm1Qt3wVpuCNdjYxBqMlvIqMRuV7NwAx0woXh9YsIBvfZYyWDubASTsIOlxKMWqSCAtwt3us/oz4I0tIfnaHq08GWR03bv6w/KTN/VPymfuhjcFM1LBhouL+wFFZdMc4J9cE8fti7oZz2jlIVhIf5TUuPSFZnf9I71S8Z5c5Eme5MgPtX+WVCCAhI4kuaEQPxvxgvv0SqO8iMiEh7TzCF3/Q5HrqWmgXJBjiuAkjZoPhmPuY7THpAkWTrhNysDeAQL/lmTblzP9L5aHYF6DQwG9SJ3/QdXO7dQ="
    - PROJECT_NAME=PyFastNER
    - GITHUB_REPO_NAME=jianlins/PyFastNER
    - CONDA_PKG_NAME_PY=PyFastNER
    - PYPI_LOGIN=jianlins
    - DEPLOY_TEST=true



jobs:
  include:
     - name: "Python 3.6 on macOS"
       os: osx
       osx_image: xcode11.2  # Python 3.7.4 running on macOS 10.14.4
       language: shell       # 'language: python' is an error on Travis CI macOS
       env: TRAVIS_PYTHON_VERSION=3.6
     - name: "Python 3.7 on macOS"
       os: osx
       osx_image: xcode11.2  # Python 3.7.4 running on macOS 10.14.4
       language: shell       # 'language: python' is an error on Travis CI macOS
       env: TRAVIS_PYTHON_VERSION=3.7
     - name: "Python 3.8 on macOS"
       os: osx
       osx_image: xcode11.2  # Python 3.7.4 running on macOS 10.14.4
       language: shell       # 'language: python' is an error on Travis CI macOS
       env: TRAVIS_PYTHON_VERSION=3.8

before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      echo "Installing Miniconda";
      CONDA_PLATFORM=MacOSX;
      travis_retry wget -O miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-${CONDA_PLATFORM}-x86_64.sh;
      bash miniconda.sh -b -p $HOME/miniconda;
      source "$HOME/miniconda/etc/profile.d/conda.sh";
      hash -r;
      conda config --set always_yes yes --set changeps1 no;
      conda update -q conda;
      conda --version;
      conda info -a;
      conda create -q -n test-environment python=$TRAVIS_PYTHON_VERSION pip;
    fi



install:
  - echo "TRAVIS_PYTHON_VERSION:$TRAVIS_PYTHON_VERSION";
  - echo "DOCKER_IMAGE:$DOCKER_IMAGE";
  - echo "$TRAVIS_OS_NAME:$TRAVIS_OS_NAME";
  - echo "PROJECT_NAME:$PROJECT_NAME"
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then  echo "dimg:$DOCKER_IMAGE;python:$TRAVIS_PYTHON_VERSION"; travis_retry docker pull quay.io/pypa/$DOCKER_IMAGE; fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then  conda activate test-environment; pip install -q -r travis/osx_dev_requirements.txt; fi

before_script: ccache -s || true

script:
  - if [[ $TRAVIS_OS_NAME == linux ]]; then
        chmod 775 travis/build-wheels.sh;
        echo "TRAVIS_PYTHON_VERSION:$TRAVIS_PYTHON_VERSION";
        docker run --name "dk_$PLAT_$TRAVIS_PYTHON_VERSION" -v `pwd`:/io quay.io/pypa/$DOCKER_IMAGE $PRE_CMD /bin/sh -c "/io/travis/build-wheels.sh $DOCKER_IMAGE $PROJECT_NAME $TRAVIS_PYTHON_VERSION";
        pwd;
        echo "Inside wheelhouse"
        ls wheelhouse;
    fi

  - if [[ $TRAVIS_OS_NAME == osx ]]; then
        pip wheel ./ -w wheelhouse/; ls wheelhouse;
        pip install wheelhouse/$PROJECT_NAME*.whl --no-index -f
        pwd; ls;
        cp -R tests "$HOME"/tests;
        cd "$HOME";
        pwd ;
        nosetests tests;
        cd build/$GITHUB_REPO_NAME ;
        ls wheelhouse;
        for whl in wheelhouse/*.whl; do
            echo $whl;
            if [[ $whl == wheelhouse/${PROJECT_NAME}* ]]; then
                echo 'match..';
            else
                rm $whl;
            fi
        done;
        echo "after clean wheelhouse";
        ls wheelhouse;
    fi

before_deploy: pip install twine

deploy:
  # deploy develop to pypi.org
  - provider: script
    skip_cleanup: true
    script: pwd;ls; ls wheelhouse; python -m twine upload --skip-existing -u ${PYPI_LOGIN} -p ${PYPI_PWD} wheelhouse/${PROJECT_NAME}*;
    on:
      repo: ${GITHUB_REPO_NAME}
      tags: true
      condition: "$DEPLOY_TEST == false"

  # deploy develop to test.pypi.org
  - provider: script
    skip_cleanup: true
    script: pwd;ls; ls wheelhouse; python -m twine upload --skip-existing -u ${PYPI_LOGIN} -p ${PYPI_PWD} --repository-url https://test.pypi.org/legacy/ wheelhouse/${PROJECT_NAME}*;
    on:
      repo: ${GITHUB_REPO_NAME}
#       tags: true
      condition: "$DEPLOY_TEST == true"

